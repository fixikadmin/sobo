{"pages":[{"url":"blog/posts/2019/02/27/zimbra-security/","text":"INTRO SCRIPT .. raw:: html REFERINTE : [1] https://stackoverflow.com/questions/28706806/pelican-external-image-in-restructured-text","tags":"Zimbra","title":"Securitatea in Zimbra OSE"},{"url":"blog/posts/2018/10/20/notificarea-utilizatorilo-despre-expirarea-parolei/","text":"INTRO In instalatia default Zimbra notificarea catre utilizatori care informeaza utilizatorul despre expirarea parolei sale nu este transmis. Astfel utilizatorul este nevoit sa apeleze la administratorul serviciului de posta electronica cu rugamintea de ai reseta parola (In cazul ca nu o cunoaste). Utilizatorii MS Outlook primesc eroare la conectare. In acest caz folosim un script Bash care in vom pune in cron, pentru a rula in fiecare zi. SCRIPT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #!/bin/bash FROM = \"postmaster@zimbra.md\" DOMAIN = \"zimbra.md\" SENDMAIL = $( ionice -c3 find /opt/zimbra/ -type f -iname sendmail ) USERS = ` /opt/zimbra/bin/zmprov -l gaa | grep -v \"galsync\" | grep -v \"zimbra.md\" ` ; DATE = $( date +%s ) for USER in $USERS do OBJECT = \"(&(objectClass=zimbraAccount)(mail= $USER ))\" ZIMBRA_LDAP_PASSWORD = ` su - zimbra -c \"zmlocalconfig -s zimbra_ldap_password | cut -d ' ' -f3\" ` LDAP_MASTER_URL = ` su - zimbra -c \"zmlocalconfig -s ldap_master_url | cut -d ' ' -f3\" ` LDAPSEARCH = $( ionice -c3 find /opt/zimbra/ -type f -iname ldapsearch ) PASS_SET_DATE = ` $LDAPSEARCH -H $LDAP_MASTER_URL -w $ZIMBRA_LDAP_PASSWORD -D uid = zimbra,cn = admins,cn = zimbra \\ -x $OBJECT | grep zimbraPasswordModifiedTime: | cut -d \" \" -f 2 | cut -c 1 -8 ` EXPIRES = $( date -d \" $PASS_SET_DATE 60 days\" +%s ) DEADLINE = $(( (( $DATE - $EXPIRES )) / -86400 )) SUBJECT = \" $USER - Parola contului DVS. e-mail expira in $DEADLINE zile\" BODY = \" Stimate client, detinator al adresei e-mail $USER , Va anuntam ca parola dvs. de e-mail va expira in $DEADLINE zile. Va rugam sa modificati parola e-mail \\ prin Web Mail: - Adresa : https:// $DOMAIN 1. Conectati-va la Web Mail prin adresa de mai sus 2. Selectati fila Preferinte 3. Faceti clic pe butonul Modifica parola 4. Completati parola veche, noua parola si confirmati noua parola 5. Faceti clic pe Modificare parola pentru a o schimba Parola contului e-mail trebuie sa contina de cel putin 8 caractere, cu o combinatie de caractere alfanumerice \\ (majuscule, litere mici, numere) si simboluri (! @ # $ , Etc.). Daca aveti intrebari cu privire la modul de a schimba parola de e-mail, va rugam sa contactati echipa de asistenta \\ la nr. de tel. x(xx)xxxxxx Multumim, echipa Zimbra.md \" if [[ \" $DEADLINE \" -eq \"5\" ]] then echo \"Subject: $SUBJECT \" \" $BODY \" | $SENDMAIL -f \" $FROM \" \" $USER \" echo \"Reminder email sent to: $USER - $DEADLINE days left\" elif [[ \" $DEADLINE \" -eq \"3\" ]] then echo \"Subject: $SUBJECT \" \" $BODY \" | $SENDMAIL -f \" $FROM \" \" $USER \" echo \"Reminder email sent to: $USER - $DEADLINE days left\" elif [[ \" $DEADLINE \" -eq \"1\" ]] then echo \"Subject: $SUBJECT \" \" $BODY \" | $SENDMAIL -f \" $FROM \" \" $USER \" echo \"Last chance for: $USER - $DEADLINE days left\" else echo \"Account: $USER reports; $DEADLINE days on Password policy\" fi done REFERINTE : [1] https://imanudin.net/2017/02/04/script-notify-expired-password-on-zimbra [2] https://github.com/wuxmedia/Zimbra_passpoll/blob/master/passpoll.sh","tags":"Zimbra","title":"Notificarea utilizatorilor despre expirarea parolei"},{"url":"blog/posts/2018/06/18/afisarea-variabilelor-in-python/","text":"Intro Afisarea variabilelor este necesara in mare parte pentru a depana vre-o problema oarecare in procesul crearii unui script. Metode de afisare sunt foarte multe care se schimba de la o versiune la alta. Mai jos voi prezenta niste sample-uri. Pass it as a tuple: print(\"Total score for %s is %s\" % (name, score)) A tuple with a single element looks like (â€˜this',).Here are some other common ways of doing it: Pass it as a dictionary: print(\"Total score for %(n)s is %(s)s\" % {'n': name, 's': score}) Use new-style string formatting: print(\"Total score for {} is {}\".format(name, score)) Use new-style string formatting with numbers (useful for reordering or printing the same one multiple times): print(\"Total score for {0} is {1}\".format(name, score)) Use new-style string formatting with explicit names: print(\"Total score for {n} is {s}\".format(n=name, s=score)) Concatenate strings: print(\"Total score for \" + str(name) + \" is \" + str(score)) The clearest two, in my opinion: Just pass the values as parameters: print(\"Total score for\", name, \"is\", score) If you don't want spaces to be inserted automatically by print in the above example, change the sep parameter: print(\"Total score for \", name, \" is \", score, sep='') If you're using Python 2, won't be able to use the last two because print isn't a function in Python 2. You can, however, import this behavior from future : from __future__ import print_function Use the new f-string formatting in Python 3.6: print(f'Total score for {name} is {score}') Exemplu a = 10 b = 20 c = a + b #Normal string concatenation print(\"sum of\", a , \"and\" , b , \"is\" , c) #convert variable into str print(\"sum of \" + str(a) + \" and \" + str(b) + \" is \" + str(c)) # if you want to print in tuple way print(\"Sum of %s and %s is %s: \" %(a,b,c)) #New style string formatting print(\"sum of {0} and {1} is {2}\".format(a,b,c)) #in case you want to use repr() print(\"sum of \" + repr(a) + \" and \" + repr(b) + \" is \" + repr(c)) Surse Stackoverflow","tags":"Python","title":"Afisarea variabilelor in Python"},{"url":"blog/posts/2018/06/15/lucram-cu-functia-random-in-python/","text":"Intro Deseori este necesar de a genera numere sau elemente aliatoate , in acest scop ne ajuta functia Random. Exemple Inseram in scripturi acest cod import random #importam modului random lst = [ 1 , 3 , 10 , 17 ] # Declaram lista de numere `lst` random . shuffle ( lst ) # face permutatii aleatoare in lista `lst` print lst # arata lista `lst` cu permutatie print random . randint ( 1 , 25 ) # Selecteaza un numar aleatoar din secventa 1-25 Alte exemple: >>> random() # Random float: 0.0 <= x < 1.0 0.37444887175646646 >>> uniform(2.5, 10.0) # Random float: 2.5 <= x < 10.0 3.1800146073117523 >>> expovariate(1 / 5) # Interval between arrivals averaging 5 seconds 5.148957571865031 >>> randrange(10) # Integer from 0 to 9 inclusive 7 >>> randrange(0, 101, 2) # Even integer from 0 to 100 inclusive 26 >>> choice(['win', 'lose', 'draw']) # Single random element from a sequence 'draw' >>> deck = 'ace two three four'.split() >>> shuffle(deck) # Shuffle a list >>> deck ['four', 'two', 'ace', 'three'] >>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement [40, 10, 50, 30] Functii in modulul Random random.random() - Alege un numar Float (Virgula mobila) in raza (0.0, 1.0). random.shuffle(lista) - Face permutatie intr-o lista random.choice(secventa) - Alege un element aleator dintr-o secventa random.randint() - Alege un numar aleator Integer La crearea scriptului evitati sa denumiti scriptul cu cuvinta; \"rand\" , \"random\" si sa folositi variabile cu numele \"list\" care sunt folosite ca elemente predefinite in acest modul. Aceasta fiind o regula generala in limabjul Python Referinte Python.org","tags":"Python","title":"Lucram cu functia Random in Python"},{"url":"blog/posts/2018/05/25/elasticsearch-in-scripturi-python/","text":"Inserarea datelor Sa incepem cu inserarea datelor in indecsii ES care mai apoi vor fi publicate in Blogul Pelican. Cream indexul: curl -s XPUT $es/iptv Datele vor fi inserate din JSON in format primar ( RAW ) Fisierul iptv.json contine datele in urmatorul format (sunt date legate de IPTV ) { \"index\" : { \"_index\" : \"iptv\", \"_type\" : \"channel\", \"_id\" : \"2\" } } { \"title\" : \"MOLDOVA 1\", \"provider\" : \"SCORTEL\", \"imageUrl\" : \"http://fleek.eu.org/logos/MOLDOVA1.png\", \"stream_url_1\" : \"http://88.88.88.88/udp/238.40.9.3:1234\", \"stream_url_2\" : \"http://88.88.88.88/udp/238.40.6.10:1234\", \"stream_url_3\" : \"\" } Pentru a insera datele folosim comanda curl -s -XPUT $es/iptv/_bulk --data-binary @iptv.json Extragerea datelor In continuare trebuie sa plasam datele in blog. Vom folosi clientul oficial Python pentru Elasticsearch Aici poate fi gasita instructiunea http://elasticsearch-py.readthedocs.io/en/master/ Mai intii este nevoie da instala modulul Elasticsearch pentru Python: il vom instala in virtualenv mkvirtualenv elpy workon elpy pip install elasticearch Privim daca sa instalat pip list Obtinem Package Version ------------- ------- elasticsearch 6.2.0 pip 10.0.1 pkg-resources 0.0.0 setuptools 39.2.0 urllib3 1.22 wheel 0.31.1 Vor fi instalate elasticsearch 6.2.0 si urllib3 1.22 Cream un script care va lucra cu documentele din indecsii ES \"elpy.py\" from datetime import datetime from elasticsearch import Elasticsearch es = Elasticsearch () doc = { 'author' : 'JekA' , 'text' : 'Elasticsearch: cool. bonsai cool.' , 'timestamp' : datetime . now (), } res = es . index ( index = \"test-index\" , doc_type = 'tweet' , id = 1 , body = doc ) print ( res [ 'result' ]) res = es . get ( index = \"test-index\" , doc_type = 'tweet' , id = 1 ) print ( res [ '_source' ]) es . indices . refresh ( index = \"test-index\" ) res = es . search ( index = \"test-index\" , body = { \"query\" : { \"match_all\" : {}}}) print ( \"Got %d Hits:\" % res [ 'hits' ][ 'total' ]) for hit in res [ 'hits' ][ 'hits' ]: print ( \" %(timestamp)s %(author)s : %(text)s \" % hit [ \"_source\" ]) Declaratia variabilei es = Elasticsearch() inseamna ca acest script se va conecta la http://localhost:9200 , insa noi vom lucra cu Bonsai.io (Cum am scris in postul precedent , e fara plata si e perfect pentru teste) Bonsai. IO foloseste un astfel de link pentru conexiune https://xxxxxxx_username:xxxxxx+password@user-first-sandbox-349333342.us-west-2.bonsaisearch.net , in acest caz trebuie sa mai setam si module pentru autentificare SSL . Instalam certifi , modul de autentificare in python pip install certifi modificam scriptul elpy.py import os , base64 , re , logging , certifi from datetime import datetime from elasticsearch import Elasticsearch # Logam datele de transport (optional): logging . basicConfig ( level = logging . INFO ) # Extragem datele de autentificare si hostul ES din variabilele env: bonsai = os . environ [ 'es' ] auth = re . search ( 'https\\:\\/\\/(.*)\\@' , bonsai ) . group ( 1 ) . split ( ':' ) host = bonsai . replace ( 'https:// %s : %s @' % ( auth [ 0 ], auth [ 1 ]), '' ) print host # Ne conectam la clusterul ELS prin SSK prin autentificare pentru siguranta: es_header = [{ 'host' : host , 'port' : 443 , 'use_ssl' : True , 'ca_certs' : certifi . where (), 'http_auth' : ( auth [ 0 ], auth [ 1 ]) }] # Initiam o conexiune noua la Elasticsearch es = Elasticsearch ( es_header ) # Verificam daca conexiunea este activa (optional): es . ping () doc = { 'author' : 'Jeka' , 'text' : 'Elasticsearch: cool. bonsai cool.' , 'timestamp' : datetime . now (), } res = es . index ( index = \"test-index\" , doc_type = 'tweet' , id = 1 , body = doc ) print ( res [ 'result' ]) res = es . get ( index = \"test-index\" , doc_type = 'tweet' , id = 1 ) print ( res [ '_source' ]) es . indices . refresh ( index = \"test-index\" ) res = es . search ( index = \"test-index\" , body = { \"query\" : { \"match_all\" : {}}}) print ( \"Got %d Hits:\" % res [ 'hits' ][ 'total' ]) for hit in res [ 'hits' ][ 'hits' ]: print ( \" %(timestamp)s %(author)s : %(text)s \" % hit [ \"_source\" ]) Referinte: http://elasticsearch-py.readthedocs.io/en/master/ http://witkowskibartosz.com/blog/utilizing_elasticsearch_python_client.html#.WwfANyC-mUk https://docs.bonsai.io/docs/python","tags":"Elastic","title":"Elasticsearch in scripturi Python"},{"url":"blog/posts/2018/05/24/lucram-cu-elasticsearch-in-proiecte/","text":"Voi da start unei serii de postari despre Elasicsearch Voi descrie care-va comenzi ES prin care putem opera cu datele Intii de toate avem nevoie de o instanta Elasticsearch , eu am ales siteul bonsai.io, este free si este deajuns pentru testele noastre Pentru a putea mai usor lucra cu comenzile , facem o variabila de sistem es care va inlocui http://localhost:9200 sau alt link de access pa API -ul elasticsearc export es=https://xxxxxxx_username:xxxxxx+password@user-first-sandbox-349333342.us-west-2.bonsaisearch.net 1. Arata versiunea si statutul ES (Elasticsearch) curl -s -XGET $es 2. Arata indecsii din ES curl -s -XGET $es/_cat/indices?pretty sau curl 'localhost:9200/_cat/indices?v' sau cu sortare dupa numarul de documente, descrescator curl -s -XGET $es/_cat/indices?v&s=docs.count:desc Arata o statistica a indexurilor curl -s -XGET $es/_stats/indexing,store?pretty 3. Creaza un index cu numele curl -s XPUT $es/newindex dupa execute {\"acknowledged\":true,\"shards_acknowledged\":true} reprezinta un reziltat pozitiv 4. Stergerea indecsului Pentru a sterge un index din ElasticSearch rulati comanda de mai jos: curl -s -XDELETE $es/newindex 5. Introducerea datelor in Elasicsearch De notat ca sunt doua metode esentiale de adaugare a datelor in Elasticsearch: 1. JSON prin HTTP 2. Clientul native Inserarea unui document in Elasticsearch fara a defini un ID curl -XPUT '$es/data/user/dilbert' -d '{ \"name\" : \"Dilbert Brown\" }' curl -s -XPUT $es/data/post/1 -d ' { \"user\": \"dilbert\", \"postDate\": \"2011-12-15\", \"body\": \"Search is hard. Search should be easy.\" , \"title\": \"On search\" }' curl -s -XPUT $es/data/post/2 -d ' { \"user\": \"dilbert\", \"postDate\": \"2011-12-12\", \"body\": \"Distribution is hard. Distribution should be easy.\" , \"title\": \"On distributed search\" }' curl -XPUT $es/data/post/3 -d ' { \"user\": \"dilbert\", \"postDate\": \"2011-12-10\", \"body\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat\" , \"title\": \"Lorem ipsum\" }' curl -XPUT $es/data/post/4 -d ' { \"user\": \"Ciobanu\", \"postDate\": \"2018-05-23\", \"body\": \"Cautam in Elasticsearch cu JSON\" , \"title\": \"Cautare din consola\" }' sau intr-o linie curl -s -XPUT '$es/data/user/ciobanu' -d '{ \"name\" : \"Ciobanu\",; \"surname\" : \"Ion\",; \"e-mail\": \"i.ciobanu@domen.md\"}' Sa verificam dacat toate datele au fost inroduse curl -XGET $es/data/user/dilbert?pretty=true curl -XGET $es/data/post/1?pretty=true curl -XGET $es/data/post/2?pretty=true curl -XGET $es/data/post/3?pretty=true 6. Cautare Cautam toate postarile userului Dilbert curl -s -XGET $es/data/post/_search?q=user:dilbert&pretty=true Cautam toate articolele cate nu contin cuvintul \"search\" curl -s -XGET $es/data/post/_search?q=-title:search&pretty=true Cautam toate articolele care contin \"search\" dar nu contin \"disributed\" curl -s -XGET $es/data/post/_search?q=+title:search%20-title:distributed&pretty=true&fields=title' Cautam dupa data curl -s -XGET $es/data/_search?pretty -d '{ \"query\" : { \"range\" : { \"postDate\" : { \"from\" : \"2011-12-10\", \"to\" : \"2011-12-12\" } } } }' Cautam intr-un index curl -s -XGET $es/data/_search?pretty -d '{ \"query\" : { \"match_all\" : {} } }'","tags":"Elastic","title":"Lucram cu Elasticsearch in proiecte"},{"url":"blog/posts/2018/05/22/add-calendar-to-all-zimbra-users/","text":"Sarcina pusa este: Crarea unui calendar comun pentru toti utilizatorii cu urmatoarele proprietati: Calendarul trebuie sa fie inclus in toate conturile participantilor Va fi completat de fiecare participant in conformitate cu programul zilei propriu. Participantii pot vedea statutul celulilalt paricipant (Ocupar/Disponibil) in calendarul sau. Participantii vor fi adaugati automat la crearea unui nou utilizator Un cont specializat va integra toate calendarele pentru a crea reguli VOIP de readresare a apelurilor Crearea unui calendar comun cu zilelel de odihna si sarbatori. Calendarul trebuie sa fie public. Va fi administrat doar de o persoana 1. Crarea unui calendar comun pentru toti utilizatorii Se creaza un Operator de calendar, de ex. robocall@domen.md Se creaza un un grup de distibutie cu toti paricipantii, de ex. call.center@domen.md In acest grup se adauga toti participantii care vor partaja calendarele proprii Se executa comanda zmprov pentru a aadauga calendele din grupul call.center@domen.md : zmmailbox -z -m robocall@domen.md modifyFolderGrant /Calendar group call.center@domen.md r Se adauga calendarele partajate ale participantilor grupului zmmailbox -z -m robocall@domen.md createMountpoint --view appointment \"/OP1\" operator1@domen.md /Calendar zmmailbox -z -m robocall@domen.md createMountpoint --view appointment \"/OP2\" operator2@domen.md /Calendar zmmailbox -z -m robocall@domen.md createMountpoint --view appointment \"/OP3\" operator3@domen.md /Calendar Adaugarea calendarului in contul de integrare prin Export/Import Salvam calendarul necesar wget --user operator1@domen.md --password password --no-check-certificate https://hostname/home/operator1@domen.md/Calendar.ics Importam in calendarul contului specilaizat curl --insecure -u robcall@domen.md:password --upload-file Calendar.ics https://hostname/service/home/robocall@domen.md/Calendar?fmt=ics 2. Adaugarea mai multor calendare ale utilizatorilor intr-un calendar specializat. Creem calendarul zmprov sm operator2@domen.md createFolder --view appointment --color blue --flags \"#\" /RoboCal Setam permisiuni de citire pentru calendareele create pentru utilizatorii; operatpr1, operator2, operator3 zmmailbox -z -m operator1@domen.md modifyFolderGrant /RoboCal group call.center@domen.md r zmmailbox -z -m operator2@domen.md modifyFolderGrant /RoboCal group call.center@domen.md r zmmailbox -z -m operator3@domen.md modifyFolderGrant /RoboCal group call.center@domen.md r Se include fiecare calendar in contul specializat zmmailbox -z -m robocall@domen.md createMountpoint --view appointment -color blue --flags \"#\" \"/Operator1\" operator1@domen.md /RoboCal zmmailbox -z -m robocall@domen.md createMountpoint --view appointment -color blue --flags \"#\" \"/Operator2\" operator2@domen.md /RoboCal zmmailbox -z -m robocall@domen.md createMountpoint --view appointment -color blue --flags \"#\" \"/Operator3\" operator3@domen.md /RoboCal --flags \"#\" semnifica ca calendarul este bifat Pentru a automatiza procesul vom folosi un script bash: https://wiki.zimbra.com/wiki/Automating_Reciprocal_Calendar_Sharing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/bash if [ \" $# \" == \"1\" ] then users = $( zmsoap --type admin --zadmin GetDistributionListRequest/dl = \" $1 \" @by = \"name\" | grep dlm | sed -e 's/.*<dlm>\\(.*\\)<\\/dlm>/\\1/g' ) echo $users for u in $users do echo zmmailbox -z -m $u modifyFolderGrant /RoboCal group call.center@domen.md r uname = $( zmmailbox -z -m $u gid -v | grep zimbraPrefFromDisplay | sed -e 's/.*: \"\\(.*\\)\",/\\1/' ) for v in $users do if [ $u ! = $v ] then echo zmmailbox -z -m $v createMountpoint --view appointment \\\" / $uname \\' s Calendar \\\" $u /RoboCal fi done done else echo \"usage: $0 distlist@zimbradomain.com\" fi Salvam scriptul ca zimbraRecipCalShare.sh . Dam drepturi de executie chmod +x zimbraRecipCalShare.sh Rulam scriptul de sub utilizatorul zimbra (parametrul liniei este grupul in care sunt adaugati toti participantii) zimbraRecipCalShare.sh call.center@domen.md > check_me_first.sh Verifica daca continutul scriptului contine comenzi zmmailbox corecte si executam rezultatul bash check_me_first.sh In rezultat fiecare din participanti va avea calendarele celorlalti cu drepturi doar de citire.","tags":"Zimbra","title":"Add calendar to all Zimbra users"},{"url":"blog/posts/2018/05/20/tmux-screen-manager/","text":"Instalarea tmux In Debian apt-get install tmux In Centos yum install tmux Startare tmux si lucrul cu ecranele Tmux se starteaza prin comanda: tmux Pentru a deschide ecrane noi in tmux folositi combinatia de taste CTRL + b si apoi separat % . Pentru a tranzita intre ferestre folositi combinatiile de taste CTRL + b urmat de o sau CTRL + b urmat de > , < , &#94; , v . Pentru a inchide un ecran inchideti shell-ul folosind CTRL + d sau exit sau logout . Pentru a va detasa de tmux folositi combinatia de taste ctrl + b urmat de d . Pentru a va reatasa la tmux folositi comanda tmux attach Alte comenzi: Inchide panelul curent: CTRL - b + x Adauga un panel in fereastra curenta (pe oriozontala): CTRL - b + SHIFT - \" Interschima continutul intre peneluri: CTRL - b + SHIFT - [ si CTRL - b + SHIFT - ] Listeaza sesiunile tmux: CTRL - b + w Arata numarul panelulului: CTRL - b + q Trece la urmatoarea sesiune tmux: CTRL - b + n Trece la sesiune tmux precedenta: CTRL - b + p Arata toate comenzile posibile: tmux list-keys Referinte https://gist.github.com/karenyyng/5de2823651965361b788","tags":"Admin","title":"Lucram cu tmux"},{"url":"blog/posts/2018/05/18/ffmpeg-stream-webcam/","text":"In acest post am pus citeva comenzi utile pentru organizarea translarii camerei web cu FFmpeg si VLC Startarea translarii cu vlc /usr/bin/vlc-wrapper v4l2:///dev/video0 :v4l2-standard= :input-slave=alsa://hw:0,0 :live-caching=300 :sout=\"#transcode{vcodec=WMV2,vb=800,scale=1,acodec=wma2,ab=128,channels=2,samplerate=44100}:http{dst=:8080/stream.wmv}\" Translarea in webm (Video si Sunet) ffmpeg -s 640x360 \\ -f video4linux2 -i /dev/video0 -isync -vcodec libvpx -vb 768000 -r 10 -vsync 1 \\ -f alsa -ac 1 -i hw:1,0 -acodec libvorbis -ab 32000 -ar 11025 \\ -f webm /var/www/test.webm Translarea in webm (Video) ffmpeg -s 640x360 \\ -f video4linux2 -i /dev/video0 -isync -vcodec libvpx -vb 768000 -r 10 -vsync 1 \\ -f webm /var/www/telemed/test.webm ffmpeg -s 640x360 -f video4linux2 -i /dev/video0 -isync -vcodec libvpx -vb 768000 -r 10 -vsync 1 -f webm /mnt/ntfs/allusers/Cam/`date +%F-%H-%M-%S`.webm Inregistrare Stream ffmpeg -i http://88.88.88.88/udp/238.40.9.29:1234 -r 15 /tmp/publika.mp4","tags":"Admin","title":"Translarea si inregistrarea web-camerei"},{"url":"blog/posts/2018/05/18/install-pelican-virtualenv/","text":"Intii de tote avem nevie ca in sistem sa fie instalat Python 2.7 si Pip (Python Package Manager) apt-get install python python-virtualenv python-pip verificam daca PIP este instalat command -v pip Virtualenv Virtualenv este un mediu virtual destinat pentru pastrarea dependentelor prin crearea de medii virtuale Python. De exemplu \"Proiectul X depinde de versiunea 1.x dar, proiectul Y are nevoie de 4.x\" Virtualenv pastreaza directorul global de pachete curat si usor de gestionat. Se instaleaza Virtualenv si Virtualenvwrapper pip install virtualenv virtualenvwrapper In ~/.bashrc scriem: export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python source /usr/local/bin/virtualenvwrapper.sh Se executa source ~/.bashrc La acest moment puteam crea medii virtuale, fara a incarca sistemul cu pachete Creare VENV mkvirtualenv nume-venv Lucram in VENV workon nume-venv Listare VENV lsvirtyualenv Parasim VENV deactivate Eliminate VENV rmvirtualenv Cupa ce mediul virtual a fost creat , intram in acesta cu comanda workon name-venv si instalam packetele necesare cu PIP mkvirtualenv pelican mkdir pelican cd pelican pip install pelican markdown Pentru a instala packetele necesare unui proiect putem folosi fisierul requiremenst.txt si comanda install -r requirements.txt Pntru a initia blogul vedeti postul http://py.din.md/blog/posts/2018/05/17/create-pelican-blog/ Sursa: http://nosferalatu.com/setting-up.html","tags":"Pelican","title":"Istalare Pelican Blog"},{"url":"blog/posts/2018/05/18/modify-theme-bootstrap/","text":"Mai intii haideti sa vedem ce modificari sunt propuse. Pe acest liunk sunt aratate Demo pentru diferite stiluri de vizualizare https://www.bootstrapcdn.com/bootswatch/ Eu am ales bootstrap.slate.min.css . Ca sa aplicam CSS -ul trebuie sa il copiem in directorul temei \"pelican-bootstrap3\" cd pelican-themes/pelican-bootstrap3/static/css Facem o copie de rezerva cp -Ra bootstrap.min.css bootstrap.min.css.bk Copiem CSS -ul din directorul repectiv (poate fi downloadat direct de pe https://www.bootstrapcdn.com/bootswatch/ ) cp bootstrap.slate.min.css bootstrap.min.css","tags":"Pelican","title":"Modificarea temei - Pelican"},{"url":"blog/posts/2018/05/18/git-commonly-commands/","text":"Git Commands A list of my commonly used Git commands Getting & Creating Projects Command Description git init Initialize a local Git repository git clone ssh://git@github.com/[username]/[repository-name].git Create a local copy of a remote repository Basic Snapshotting Command Description git status Check status git add [file-name.txt] Add a file to the staging area git add -A Add all new and changed files to the staging area git commit -m \"[commit message]\" Commit changes git rm -r [file-name.txt] Remove a file (or folder) Branching & Merging Command Description git branch List branches (the asterisk denotes the current branch) git branch -a List all branches (local and remote) git branch [branch name] Create a new branch git branch -d [branch name] Delete a branch git push origin --delete [branchName] Delete a remote branch git checkout -b [branch name] Create a new branch and switch to it git checkout -b [branch name] origin/[branch name] Clone a remote branch and switch to it git checkout [branch name] Switch to a branch git checkout - Switch to the branch last checked out git checkout -- [file-name.txt] Discard changes to a file git merge [branch name] Merge a branch into the active branch git merge [source branch] [target branch] Merge a branch into a target branch git stash Stash changes in a dirty working directory git stash clear Remove all stashed entries Sharing & Updating Projects Command Description git push origin [branch name] Push a branch to your remote repository git push -u origin [branch name] Push changes to remote repository (and remember the branch) git push Push changes to remote repository (remembered branch) git push origin --delete [branch name] Delete a remote branch git pull Update local repository to the newest commit git pull origin [branch name] Pull changes from remote repository git remote add origin ssh://git@github.com/[username]/[repository-name].git Add a remote repository git remote set-url origin ssh://git@github.com/[username]/[repository-name].git Set a repository's origin branch to SSH Inspection & Comparison Command Description git log View changes git log --summary View changes (detailed) git diff [source branch] [target branch} Preview changes before merging Source https://github.com/joshnh/Git-Commands/blob/master/ README .md Initierea locala a proiectului git init git add README.md git commit -m \"Primul commit\" git remote add origin https://github.com/JacobsCofee/sobo.git git pull git push -u origin master Facem Update la repozitoru local git pull origin master sau git pull origin new-branch Se reseteaza si se actuliazeaza git reset --hard HEAD git fetch origin git reset --hard origin/master Se face copie de rezerva in alt Branch git commit -a -m \"Saving my work, just in case\" git branch my-saved-work Se sterg fisierele locale git clean -f Se reseteaza Credentialele git config --global user.name \"Your Name\" git config --global user.email you@example.com","tags":"Github","title":"Comenzi utile pentru GitHuB"},{"url":"blog/posts/2018/05/17/pelican-markdown/","text":"Eu deseori cind scriu continutul uit cum sa fac ca textul sa fie Bold/Italic sau sa inserez un link , este diferit de HTML . Mai jos voi da exemple cum putem structura textul. Antet (H1, H2, â€¦ H6); # Antet H1 ## Antet H2 ... ###### Antet H6 Exemplu Exemplu Exemplu Exemplu Exemplu Exemplu Exemplu Header This is a huge header ================== this is a smaller header ------------------ Exemplu This is a huge header this is a smaller header Caractere Bold\\Cursiv\\Italic *this is in italic* and _so is this_ **this is in bold** and __so is this__ ***this is bold and italic*** and ___so is this___``` Exemplu this is in italic and so is this this is in bold and so is this this is bold and italic and so is this Linie orizontala _ _ _ _ * * * * - - - - Exemplu sau sau Citate > De ce nu > Ar putea fi Exemplu De ce nu Ar putea fi Liste * Primul item * Al doilea item * Al treilea item Exemplu Primul item Al doilea item Al treilea item sau enumerare 1. Primul item + Al doilea item * Al treilea item sau 1. Primul item + Al doilea item * Al treilea item 9. orice numar de caractere , +, -, sau * va continua lista. * include 4 spatii (sau Tab) pentru a continua cu sublista 1. ontunam listarea entitatilor * am revenit la nivelul 2 Exemplu Primul item Al doilea item Al treilea item orice numar de caractere , +, -, sau * va continua lista. include 4 spatii (sau Tab) pentru a continua cu sublista ontunam listarea entitatilor am revenit la nivelul 2 Cod sursa Codul sursa se include in \" \"la inceput si la sfirsit Astfel se include o parte a unui cod sursa cod susrsa` in text Link-uri < http : //someurl> < somebbob @ example . com > [ like this ]( http : //someurl) [ like this ]( http : //someurl \"this title shows up when you hover\") Exemplu http://someurl somebob@example.com like this like this Link-uri cu referinte You can also put the [ link URL ][ 1 ] below the current paragraph like [ this ][ 2 ]. [ 1 ] : http : //url [ 2 ] : http : //another.url \"A funky title\" Output: You can also put the link URL below the current paragraph like this . Imagini Imagine ! [ alt text ] ( http : //config.eu.org/wp-content/uploads/2015/06/linux_console_Services_Featured.jpg) ![alt text] (http://config.eu.org/wp-content/uploads/2015/06/linux_console_Services_Featured.jpg) Lista TO - DO - [ ] Nu este executat - [x] Executat - [ ] Nu a fost indeplinit Exemplu: [ ] Nu este executat [x] Executat - [ ] Nu a fost indeplinit Tabele Coloana 1 | Coloana 2 ----------|---------- Item 1.1 | Item 2.1 Item 1.2 | Item 2.2 Output: Coloana 1 Coloana 2 Item 1.1 Item 2.1 Item 1.2 Item 2.2 Output 2: First Header Second Header Content Cell Content Cell Content Cell Content Cell Tabelul poate fi aranjat - stinga, centru, dreapta Coloana 1 | Coloana 2 | Coloana 3 :- -------- |:- --------: | ----------: | Stinga | Centru | Dreapta Output: Coloana 1 Coloana 2 Coloana 3 Stinga Centru Emoji Markdown poate interpreta si Emoji, sunt vizibile si n GitHUB :smile: :cry: :wink: :sleeping: :angry: :smoke: Cod HTML Deasemenea poate fi inclus cod HTML pentru a putea insera Video de pe YouTube, slide-uri etc < img style = \"float: right;\" src = \"/static/about.jpg\" alt = \"Photo\" /> Referinte https://sourceforge.net/p/pelican-edt/wiki/markdown_syntax/ https://eax.me/pelican/ Un test","tags":"Pelican","title":"Adaugarea continutului si formatarea"},{"url":"blog/posts/2018/05/17/create-pelican-blog/","text":"Pelican este gratuit/open source. Facilitatile care permit o utilizare usoara sunt: postarile si paginile sunt scrise cu marcaje. Pelican este unul dintre cele mai populare generatoare de site-uri disponibile. Este scris in Python si vine cu o multime de plugin-uri pentru a extinde functionalitatea. Pelican este gratuit/open source. Facilitatile care permit o utilizare usoara sunt: postarile si paginile sunt scrise cu marcaje. Fragmente html personalizate pot fi, de asemenea, utilizate. O colectie vasta de teme si plugin-uri disponibile. scrieti propria tema si pluginuri cu usurinta. Rezultatul complet static, poate gazdui oriunde. Aici sunt instructiunile de instalare a pachetului PELICAN http://docs.getpelican.com/en/3.6.3/install.html Vom trece la initializarea proiectului pelican-quickstart Vom introduce datele despre blogului Welcome to pelican-quickstart v3.7.1. This script will help you create a new Pelican-based website. Please answer the following questions so this script can generate the files needed by Pelican. > Where do you want to create your new web site? [.] > What will be the title of this web site? sobo > Who will be the author of this web site? JekA > What will be the default language of this web site? [en] > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) > What is your URL prefix? (see above example; no trailing slash) py.din.md > Do you want to enable article pagination? (Y/n) > How many articles per page do you want? [10] > What is your time zone? [Europe/Paris] > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) > Do you want to upload your website using FTP? (y/N) > Do you want to upload your website using SSH? (y/N) > Do you want to upload your website using Dropbox? (y/N) > Do you want to upload your website using S3? (y/N) > Do you want to upload your website using Rackspace Cloud Files? (y/N) > Do you want to upload your website using GitHub Pages? (y/N) Done. Your new project is available at /home/beugen83/sobo Proiectul va consta in urmatoarea ierarhie (cu exceptia paginilor - prezentate in paranteze de mai jos - pe care le puteti adauga optional daca intentionati sa creati continut non-cronologic): yourproject/ +-- content L-- (pages) +-- output +-- develop_server.sh +-- fabfile.py +-- Makefile +-- pelicanconf.py # Main settings file L-- publishconf.py # Settings to use when ready to publish In continuare vom adauga prima pagina Trecem in directorul content/ si ream un fisier , de ex 2018-05-17-primul-post.md cd content/ nano 2018-05-17-primul-post.md Introducem textul Title : Primul post - Pelican Date : 2018 - 05 - 17 10 : 20 Modified : 2010 - 05 - 17 10 : 31 Category : Python Tags : pelican , sample Slug : primul - post Authors : JekA , Summary : Acesta este primul post in blogul meu , in acest sumar se scrie textul care va aparea pe prima pagina inainte de a vedea restul ( more ...) ### Pelican is a static site generator , written in Python . Highlights include : Write your content directly with your editor of choice in reStructuredText or Markdown formats Includes a simple CLI tool to ( re ) generate your site Easy to interface with distributed version control systems and web hooks Completely static output is easy to host anywhere Ready to get started ? Check out the Quickstart guide . Pelican is a static site generator , written in Python . Highlights include : ### Pelican 3 currently supports : Articles ( e . g ., blog posts ) and pages Comments , via an external service ( Disqus ). If you prefer to have more control over your comment data , self - hosted comments are another option . Check out the Pelican Plugins repository for more details . Theming support ( themes are created using Jinja2 templates ) Publication of articles in multiple languages Atom / RSS feeds Code syntax highlighting Import from WordPress , Dotclear , or RSS feeds Integration with external tools : Twitter , Google Analytics , etc . ( optional ) Fast rebuild times thanks to content caching and selective output writing Se trece in directorul de baza cd ../ Se efectuiaza comanda de generare a continutului static pelican content Obtinem Done : Processed 1 article , 0 drafts , 0 pages and 0 hidden pages in 0.13 seconds . Generarea continutului poate fi efectuata prin comanda make html Startam serverul make serve sau ./develop_server.sh start sau cd output python -m pelican.server Oprim serviciul prin CTRL-C sau ./develop_server.sh stop Dupa startarea serviciului blogul este accesibil la adresa http://127.0.0.1:8000 Editarea live: In one shell, run make regenerate . This automatically regenerates the site directory whenever you change a file in the source directory. In another shell, run the local web server make serve . Now you can change any file, refresh your browser, and immediately see your changes. The command make devserver will also do that, but it calls a Bash script, which doesn't work on Windows. Sursa: http://nosferalatu.com/setting-up.html","tags":"Pelican","title":"Crearea blogului in Pelican"},{"url":"blog/posts/2018/05/17/pelican-themes-plugins/","text":"Teme Pe site-ul proiectului Pelican https://github.com/getpelican sunt un numar mare de teme care pot fi adapattet la blogul nostru. Aici puteti sa le vedeti cum arata http://www.pelicanthemes.com . Eu mi-am facut alegerea in \"pelican-bootstrap3\". Pentru a adauga tema copiem directorul respectiv in radacina site-ului cd /tmp/ git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes Comanda de mai sus va copia toate temele, insa noi avem nevoie doar de cea aleasa. mkdir pelican-themes cp -Ra /tmp/pelican-themes_bk/pelican-bootstrap3/ ./pelican-themes/ Fiecare tema are unele setari care le diferentiaza. De exemplu \"pelican-bootstrap3\" poate fi fosita in mai multe limbi. Astfel este necesar de a citi README .md pentru fiecare pentru a vedea de ce este necesar pentru a fi compatibila cu blogul tau. Pentru a aplica tema in blog este necesar in fisierul de configurare \"pelicanconf.py\" de inclus THEME = \"pelican-themes/pelican-bootstrap3\" Am nevoie de a include in fisierul de configurare si environment Jinja2 JINJA_ENVIRONMENT = {'extensions': ['jinja2.ext.i18n']} Deasemenea tema necesita plugin-ul \"i18n_subsites\" Plugin-uri Pentru a instala plugin-urile necesare se procedeaza la fel ca si cu temele cd /tmp/ git clone --recursive https://github.com/getpelican/pelican-plugins ~/pelican-plugins Se copie in directorul de baza mkdir pelican-plugins cp -Ra /tmp/pelican-plugins/i18n_subsites/ ./pelican-plugins/ Se activeaza plugin-ul in \"pelicanconf.py\" PLUGIN_PATHS = ['pelican-plugins'] PLUGINS = ['i18n_subsites'] Daa folosim limba Ungleza in blogul nostru includem I18N_TEMPLATES_LANG = 'en' Salvam si startam serverul Alte customizari Pe pagina temei https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3 sunt descrise mai multe optiuni ale temei \"Pagination, Breadcrumbs, Navbar, Related Posts, Series, Favicon, Tag Cloud, etc.\" Adaugarea tag-urilor in sidebar (Aici e descris cum se instaleaza plugin-ul https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud ) In \"pelivcanconf.py\" PLUGIN_PATHS = ['pelican-plugins','tac_cloud'] apoi se adauga DISPLAY_TAGS_ON_SIDEBAR = True DISPLAY_TAGS_INLINE = True Posturi recente in sidebar DISPLAY_RECENT_POSTS_ON_SIDEBAR = True categoriile in sidebar DISPLAY_CATEGORIES_ON_SIDEBAR = True Linkuri sociale SOCIAL = (('twitter', 'http://twitter.com/DaanDebie'), ('linkedin', 'http://www.linkedin.com/in/danieldebie'), ('github', 'http://github.com/DandyDev'), ('stackoverflow', 'http://stackoverflow.com/users/872397/dandydev', 'stack-overflow')","tags":"Pelican","title":"Customizarea blogului PELICAN"},{"url":"blog/posts/2018/05/17/zimbra-bash-change-status-of-account/","text":"Am gasit pe internet urmatorea comanda pentru a modifica recursiv toate conturile din statut \"Activ\" in statut \"Closed\". Deasemenea poate fi utilizat pentru alte operatiuni cu conturile Zimbra Folosim urmatorul script in bash for i in `zmprov -l gaa bd.xenos`; do zmprov ma $i zimbraAccountStatus closed; done","tags":"Zimbra","title":"Modifica conturile  din statutul \"Active\"  in \"Closed\""},{"url":"blog/posts/2018/05/17/primul-post/","text":"Pelican is a static site generator, written in Python. Highlights include: Write your content directly with your editor of choice in reStructuredText or Markdown formats Includes a simple CLI tool to (re)generate your site Easy to interface with distributed version control systems and web hooks Completely static output is easy to host anywhere Ready to get started? Check out the Quickstart guide.Pelican is a static site generator, written in Python. Highlights include: Pelican 3 currently supports: Articles (e.g., blog posts) and pages Comments, via an external service (Disqus). If you prefer to have more control over your comment data, self-hosted comments are another option. Check out the Pelican Plugins repository for more details. Theming support (themes are created using Jinja2 templates) Publication of articles in multiple languages Atom/ RSS feeds Code syntax highlighting Import from WordPress, Dotclear, or RSS feeds Integration with external tools: Twitter, Google Analytics, etc. (optional) Fast rebuild times thanks to content caching and selective output writing","tags":"Pelican","title":"Primul post - Pelican"},{"url":"blog/posts/2018/05/16/use-github/","text":"Aici voi descrie cum se poate de plasat blogul Pelican pe GitHUB In primu rind cream un director unde vom avea site-ul nostru mkdir sobo Trecem in director cd sobo Initiam GIT git init Cream u fisier README .md in care scriem denumirea proiectului, destinatia acestuia etc. nano README.md << Primul proiect , bla, bla, bla Dam o descriere a modificarilor efectuate (Modificarile trebuie sa fie originale, deoarece aceali comentariu nu permite actualizarea) git commit -m \"Primul commit\" Indicam repozitorul unde va fi plasat continutul (Acest repozitor trebuie sa fie deja creat in GitHUB) git remote add origin https://github.com/JacobsCofee/sobo.git Transferam continutul (Vor fi necesare Username si Pass de la GitHUB) git push -u origin master Daca da eroare To https://github.com/JacobsCofee/sobo.git ! [rejected] master -> master (non-fast-forward) error: failed to push some refs to 'https://github.com/JacobsCofee/sobo.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. Efectuam git pull Fortam transferarea continutului (Vor fi necesare Username si Pass de la GitHUB) git push -f origin master","tags":"GitHUB","title":"Initierea proiectelor pe GitHUB"},{"url":"blog/posts/2017/05/17/test-typography-table/","text":"Toata informatia o puteti gasi aici https://bootswatch.com/darkly/ Navbar Navbar Home (current) Features Pricing About Search Buttons Primary Secondary Success Info Warning Danger Link Block level button Tables Type Column heading Column heading Column heading Active Column content Column content Column content Default Column content Column content Column content Primary Column content Column content Column content Secondary Column content Column content Column content Success Column content Column content Column content Danger Column content Column content Column content Warning Column content Column content Column content Info Column content Column content Column content Light Column content Column content Column content Dark Column content Column content Column content Progress","tags":"Pelican","title":"Typography pentru Pelican"},{"url":"blog/posts/2017/05/17/fsck-bad-blocks-mark/","text":"Check and mark badblocks on ext4 partitions command: fsck.ext4 -vcDfty -C 0 /dev/vg0/lv0 And the result was: /dev/vg0/lv0: ***** FILE SYSTEM WAS MODIFIED ***** 6329 inodes used (0.01%, out of 107380736) 44 non-contiguous files (0.7%) 4 non-contiguous directories (0.1%) # of inodes with ind/dind/tind blocks: 0/0/0 Extent depth histogram: 6123/119 86511679 blocks used (20.14%, out of 429497344) 178 bad blocks 40 large files 5522 regular files 719 directories 0 character device files 0 block device files 0 fifos 4294967278 links 0 symbolic links (0 fast symbolic links) 0 sockets ------------ 5965 files Memory used: 676k/416k (284k/393k), time: 21291.73/25.22/ 0.17 I/O read: 89MB, write: 19MB, rate: 0.01MB/s 178 bad blocks marked!","tags":"Admin","title":"Eliminarea blocurilor Bad pe partitiile EXT4"}]}